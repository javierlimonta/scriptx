{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","url","guid","revision","object","setObject","valid","setvalid","scanText","setscanText","show","message","variant","doneRegister","setdoneRegister","objectRef","useRef","submitHandler","a","axios","post","result","status","data","company","companyHomePage","onChangeHandler","event","rawValue","target","id","value","className","Container","style","margin","Alert","onClose","dismissible","Row","Col","md","InputGroup","Prepend","Text","FormControl","onChange","placeholder","aria-label","aria-describedby","type","Button","disabled","onClick","ref","onKeyUp","which","current","autoFocus","trim","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4b3eae62.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Container, Row, Col, InputGroup, FormControl, Button, Alert } from 'react-bootstrap';\n\nconst App = () => {\n  const [object, setObject] = React.useState({ url: 'warehouse', guid: null, revision: null });\n  const [valid, setvalid] = React.useState(false);\n  const [scanText, setscanText] = React.useState(\"\");\n  const [doneRegister, setdoneRegister] = React.useState({ show: false, message: \"\", variant: 'danger' })\n  const objectRef = React.useRef(null);\n  const submitHandler = async () => {\n    const result = await axios.post(\"http://127.0.0.1:41191/api/v1/licensing\", {\n      guid: object.guid,\n      url: object.url,\n      revision: object.revision\n    });\n    if (result) {\n      if (result.status === 200)\n        setdoneRegister({ show: true, message: `${result.data.company} - ${result.data.companyHomePage}`, variant: 'success' });\n    }\n  }\n\n  const onChangeHandler = (event) => {\n    const rawValue = { ...object };\n    rawValue[event.target.id] = event.target.value;\n    setObject(rawValue);\n    setvalid((rawValue.url && rawValue.guid && rawValue.revision));\n  }\n\n  const onKeyPressScanHandler = event => {\n    if (event.which === 13 || event.which === 9) {\n      setscanText(event.target.value);\n      objectRef.current.value = \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container style={{ margin: 20 }}>\n        {doneRegister.show && <Alert variant={doneRegister.variant} onClose={() => setdoneRegister({ ...doneRegister, show: false })} dismissible>\n          {doneRegister.message}\n        </Alert>}\n        <Row>\n          <Col md={6}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">URL</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl value={object.url || \"\"} onChange={onChangeHandler} id=\"url\" placeholder=\"URL\" aria-label=\"URL\" aria-describedby=\"basic-addon1\" />\n            </InputGroup>\n          </Col>\n          <Col md={6}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon2\">GUID</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl id=\"guid\" value={object.guid || \"\"} onChange={onChangeHandler} placeholder=\"GUID\" aria-label=\"GUID\" aria-describedby=\"basic-addon2\" />\n            </InputGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={6}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon3\">Revision</InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl type=\"number\" id=\"revision\" value={object.revision || \"\"} onChange={onChangeHandler} placeholder=\"URL\" aria-label=\"URL\" aria-describedby=\"basic-addon3\" />\n            </InputGroup>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={3}>\n            <Button variant=\"primary\" disabled={!valid} onClick={submitHandler}>Register</Button>\n          </Col>\n        </Row>\n      </Container>\n      <hr />\n      <Container>\n        <Row>\n          <Col md={6}>\n            <InputGroup className=\"mb-3\">\n\n              <input className=\"form-control\" ref={objectRef} onKeyUp={onKeyPressScanHandler}\n                autoFocus />\n            </InputGroup>\n            {scanText.trim() !== \"\" && <Alert variant=\"info\">\n              {scanText}\n            </Alert>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}